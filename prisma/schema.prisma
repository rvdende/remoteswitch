// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["metrics"]
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  password      String?
  datasources   Rdatasource[]
  permissions   Rpermission[]
  isadmin       Boolean?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// This is a list of devices and which account they are linked to
// In future we could add a list of shared users perhaps
model Rdatasource {
  id          String    @id @default(cuid())
  uuid        String    @unique
  users       User[]
  // userid      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String
  description String
  type        String
  packetCount BigInt    @default(0)
  dataRx      BigInt    @default(0)
  dataTx      BigInt    @default(0)
  inputs      Rinput[]
  outputs     Routput[]
}

model Rinput {
  id            String      @id @default(cuid())
  rdatasource   Rdatasource @relation(fields: [rdatasourceid], references: [id])
  rdatasourceid String
  name          String
  description   String
  type          String
  value         String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Routput {
  id            String      @id @default(cuid())
  rdatasource   Rdatasource @relation(fields: [rdatasourceid], references: [id])
  rdatasourceid String
  name          String
  description   String
  type          String
  value         String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Rpermission {
  id    String @id @default(cuid())
  name  String
  users User[]
}
